apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "${name}.fullname" . }}
  labels:
    {{- include "${name}.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "${name}.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "${name}.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "${name}.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: database-init
          image: bitnami/mysql:8.0.30
          command: ['sh', '-c', 'until mysql -u$MYSQL_USERNAME -p$MYSQL_PASSWORD -h$MYSQL_HOST -P$MYSQL_PORT -e "select version();"; do echo waiting for database; sleep 5; done;']
          volumeMounts:
            - name: database-secret
              mountPath: "/etc/secrets/database"
              readOnly: true
          env:
            - name: MYSQL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: database-secret
                  key: database.username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-secret
                  key: database.password
            - name: MYSQL_HOST
              valueFrom:
                secretKeyRef:
                  name: database-secret
                  key: database.host
            - name: MYSQL_PORT
              valueFrom:
                secretKeyRef:
                  name: database-secret
                  key: database.port
        - name: cache-init
          image: bitnami/redis:6.2
          command: ['sh', '-c', 'until redis-cli -a $CACHE_AUTH -h $CACHE_HOST -p $CACHE_PORT --no-auth-warning ping; do echo waiting for cache; sleep 2; done;']
          volumeMounts:
            - name: cache-secret
              mountPath: "/etc/secrets/cache"
              readOnly: true
          env:
            - name: CACHE_AUTH
              valueFrom:
                secretKeyRef:
                  name: cache-secret
                  key: cache.password
            - name: CACHE_HOST
              valueFrom:
                secretKeyRef:
                  name: cache-secret
                  key: cache.host
            - name: CACHE_PORT
              valueFrom:
                secretKeyRef:
                  name: cache-secret
                  key: cache.port
        - name: database-migration
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          args: ["dbinit"]
          volumeMounts:
            - name: database-secret
              mountPath: "/etc/secrets/database"
              readOnly: true
            - name: cache-secret
              mountPath: "/etc/secrets/cache"
              readOnly: true
            - name: broker-secret
              mountPath: "/etc/secrets/broker"
              readOnly: true
            - name: memory-db-secret
              mountPath: "/etc/secrets/memory-db"
              readOnly: true
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          args: ["production"]
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: actuator
              containerPort: 18080
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health/liveness
              port: actuator
            failureThreshold: 10
            initialDelaySeconds: 50
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health/liveness
              port: actuator
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health/readiness
              port: actuator
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "sleep 60"]
          volumeMounts:
            - name: database-secret
              mountPath: "/etc/secrets/database"
              readOnly: true
            - name: cache-secret
              mountPath: "/etc/secrets/cache"
              readOnly: true
            - name: broker-secret
              mountPath: "/etc/secrets/broker"
              readOnly: true
            - name: memory-db-secret
              mountPath: "/etc/secrets/memory-db"
              readOnly: true
        - name: logic-executor
          securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}-logic-executor:{{ .Values.image.tag | default .Chart.AppVersion }}"
          args: [ ]
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8888
              protocol: TCP
          startupProbe:
            httpGet:
              path: /q/health/live
              port: http
            failureThreshold: 30
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            httpGet:
              path: /q/health/live
              port: http
          readinessProbe:
            httpGet:
              path: /q/health/live
              port: http
          resources:
          {{- toYaml .Values.resources | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command: [ "sh", "-c", "sleep 60" ]
      volumes:
        - name: database-secret
          secret:
            secretName: {{ include "${name}.database.secretName" . }}
        - name: cache-secret
          secret:
            secretName: {{ include "${name}.cache.secretName" . }}
        - name: broker-secret
          secret:
            secretName: {{ include "${name}.broker.secretName" . }}
        - name: memory-db-secret
          secret:
            secretName: {{ include "${name}.memory-db.secretName" . }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
